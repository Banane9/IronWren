using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Text;

namespace IronWren.AutoMapper
{
    /// <summary>
    /// Contains the bindings generated by the AutoMapper.
    /// </summary>
    internal sealed class ForeignClass
    {
        private readonly ConstructorInfo constructor;
        private readonly Dictionary<string, WrenForeignMethod> functions = new Dictionary<string, WrenForeignMethod>();
        private readonly string source;

        /// <summary>
        /// Gets the <see cref="WrenForeignMethod"/>s that are part of the class.
        /// <para/>
        /// Includes everything (methods, properties, indexers).
        /// </summary>
        public ReadOnlyDictionary<string, WrenForeignMethod> Functions { get; }

        /// <summary>
        /// Gets the TypeInfo of the Type that this ForeignClass targets.
        /// </summary>
        public TypeInfo Target { get; }

        public ForeignClass(TypeInfo target)
        {
            if (target.IsAbstract && !target.IsSealed)
                throw new ArgumentException("The target type can't be abstract!", nameof(target));

            if (target.IsGenericType && target.GetGenericTypeDefinition() == target.AsType())
                throw new ArgumentException("The target type can't be an undefined generic!", nameof(target));

            Target = target;
            Functions = new ReadOnlyDictionary<string, WrenForeignMethod>(functions);

            var sourceBuilder = new StringBuilder();

            var classAttribute = Target.GetCustomAttribute<WrenClassAttribute>();
            sourceBuilder.AppendLine($"foreign class {(classAttribute?.Name ?? Target.Name)} {{");

            constructor = makeConstructors(sourceBuilder);

            // Generics?
            foreach (var method in target.DeclaredMethods.Where(method =>
                {
                    if (!method.IsPublic || method.ReturnType != typeof(void))
                        return false;

                    var parameters = method.GetParameters();
                    return parameters.Length == 1 && parameters[0].ParameterType == typeof(WrenVM);
                }))
            {
                var propertyAttribute = method.GetCustomAttribute<WrenPropertyAttribute>();
                if (propertyAttribute != null)
                {
                    var signature = Signature.MakeProperty(propertyAttribute.Type, propertyAttribute.Name);

                    if (functions.ContainsKey(signature))
                        throw new Exception("Can't have multiple properties with the same signature!");

                    functions.Add(signature, getInvoker(method));
                    sourceBuilder.AppendLine(Definition.MakeProperty(method));

                    continue;
                }

                var indexerAttribute = method.GetCustomAttribute<WrenIndexerAttribute>();
                if (indexerAttribute != null)
                {
                    var signature = Signature.MakeIndexer(indexerAttribute.Type, indexerAttribute.Arguments.Length);

                    if (functions.ContainsKey(signature))
                        throw new Exception("Can't have multiple indexers with the same signature!");

                    functions.Add(signature, getInvoker(method));
                    sourceBuilder.AppendLine(Definition.MakeIndexer(method));

                    continue;
                }

                var methodAttributes = method.GetCustomAttributes<WrenMethodAttribute>();
                foreach (var methodAttribute in methodAttributes)
                {
                    var signature = Signature.MakeMethod(methodAttribute.Name, methodAttribute.Arguments.Length);

                    if (functions.ContainsKey(signature))
                        throw new Exception("Can't have multiple methods with the same signature!");

                    functions.Add(signature, getInvoker(method));
                    sourceBuilder.AppendLine(Definition.MakeMethod(method));
                }

                sourceBuilder.AppendLine("}");

                source = sourceBuilder.ToString();
            }
        }

        public string GetSource()
        {
            return source;
        }

        internal WrenForeignClassMethods Bind()
        {
            var foreignClassMethods = new WrenForeignClassMethods();

            foreignClassMethods.Allocate = construct;
            // TODO: Finalizer?

            return foreignClassMethods;
        }

        private static WrenForeignMethod getInvoker(MethodInfo method)
        {
            // TODO: Make this a compiled Expression<WrenForeignMethod>?
            return (vm) =>
            {
                object instance = null;

                if (!method.IsStatic)
                    instance = vm.GetSlotForeign(0);

                method.Invoke(instance, new[] { vm });
            };
        }

        private void construct(WrenVM vm)
        {
            var instance = constructor.Invoke(new[] { vm });

            vm.SetSlotNewForeign(0, instance);
        }

        private ConstructorInfo makeConstructors(StringBuilder sourceBuilder)
        {
            var constructor = Target.DeclaredConstructors.SingleOrDefault(ctor =>
            {
                if (!ctor.IsPublic)
                    return false;

                var parameters = ctor.GetParameters();

                return parameters.Length != 1 && parameters[0].ParameterType != typeof(WrenVM);
            });

            if (constructor != null)
            {
                var wrenConstructors = constructor.GetCustomAttributes<WrenConstructorAttribute>().ToArray();

                if (wrenConstructors.Length == 0)
                    sourceBuilder.AppendLine(Definition.MakeConstructor());
                else
                    foreach (var wrenConstructor in wrenConstructors)
                        sourceBuilder.AppendLine(Definition.MakeConstructor(wrenConstructor.Arguments));
            }

            return constructor;
        }
    }
}